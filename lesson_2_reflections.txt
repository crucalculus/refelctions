In Lesson 2, my first reflection asked to consider what happens
when you initialize a repo? Why do you need to do it?

I think the answer is that git creates the .git directory and perhaps
does a scan of the directory to see what files are present so that it
can report back any untracked files when I do a git status. The reason
I need to run git init is that without that .git directory, I wouldn't
know how git would manage the repo.

In my second reflection, I was asked how the staging area is different
from the working directory and the repo? What value do I think it offers?

The answer is the staging area is similar to a directory, but contains
just the files I want to add to each commit. Having this separate area
gives me a great deal of control over what goes into each commit. Without
the staging area, I'm not sure how I would manage the ability of adding
only some of the files in a working directory. I'd be forced to add all
the files all of the time, even though I may only have changed a few files.

In my third reflection, I was asked how can I use the staging area
to make sure I have one commit per logical change?

I suppose the answer is that as I modify and work on a repo, I'm going
to be making changes to many files and those changes might be different.
In order to only commit one logical change per commit, I have to be
careful and once I have only logical change complete, stage only those
files that are relevant to that change. I can then add other files in 
groups that correspong to each logical change.

In my fourth reflection, I was asked what are some situations when branches
would be helpful in keeping your history organized? How would branches
help?

My answer is that by having separate branches for each line of development,
I suppose that all the commit messages would only reside in each branch.
I could then develop as many independent lines as I wanted and each would
contain its own git log messages and not be cluttered up with other commit
messages from other branches.


